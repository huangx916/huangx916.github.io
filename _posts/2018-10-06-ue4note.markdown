---
layout:     post
title:      "Unreal Engine Note"
subtitle:   " \"游戏引擎\""
date:       2018-10-06 21:00:00
author:     "A-SHIN"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 技术
---

> “Yeah It's on. ”

## 前言
前段时间有幸得到某厂专业引擎开发大佬view[引擎](https://github.com/huangx916/HXEngine)框架，指点迷津。相比商业引擎有很多不够成熟的地方。因此接下来的一段时间着重阅读unreal engine源码。
## 正文  
实体组件模式推崇“组合优于继承”的概念  
程序=数据+算法  

Classes、Private、Public  

Object->Actor+Component->Level->World->WorldContext->GameInstance->Engine  

`UObjectBaseUtility : public UObjectBase`  
`UObject : public UObjectBaseUtility`                 元数据、反射生成、GC垃圾回收、序列化、编辑器可见、Class Default Object等  
`AActor : public UObject`                             InputComponent  
`UActorComponent : public UObject`  
`USceneComponent : public UActorComponent`            FTransform  
`UPrimitiveComponent : public USceneComponent`  
`UMeshComponent : public UPrimitiveComponent`         Actor可以带多个SceneComponent来渲染多个Mesh实体  
`UChildActorComponent : public USceneComponent`  
<img class="shadow" src="/img/in-post/ue4note/1.png" width="600">  
`AInfo : public AActor`  
`ALevelScriptActor : public AActor`  
`AWorldSettings : public AInfo`  
`ULevel : public UObject`                             ALevelScriptActor AWorldSettings  
`UWorld final : public UObject`                       PersisitentLevel	subLevels  
`FWorldContext`  
`UGameInstance : public UObject`                      FWorldContext	LocalPlayers  
`UEngine : public UObject`                            TIndirectArray< FWorldContext >	WorldList;  
`UGameplayStatics : public UBlueprintFunctionLibrary`  
<img class="shadow" src="/img/in-post/ue4note/2.png" width="1000">  
<img class="shadow" src="/img/in-post/ue4note/3.png" width="300">  
<img class="shadow" src="/img/in-post/ue4note/4.png" width="150">  
面向对象派生下来的Pawn和Character，支持组合的Controller们。  
`APawn : public AActor`                               Controller	PhysicsCollision	MovementInput  
`ADefaultPawn : public APawn`  
`ASpectatorPawn : public ADefaultPawn`  
`ACharacter : public APawn`  
`AController : public AActor`                         APawn	APlayerState  
`APlayerController : public AController`              UPlayer		在任一刻，Player:PlayerController:PlayerState是1:1:1的关系。但是PlayerController可以有多个备选用来切换，PlayerState也可以相应多个切换。UPlayer的概念会在之后讲解，但目前可以简单理解为游戏里一个全局的玩家逻辑实体，而PlayerController代表的就是玩家的意志，PlayerState代表的是玩家的状态。  
`AAIController : public AController`  
`APlayerState : public AInfo`                         用来保存玩家的游戏数据  

UE的世界观是，World更多是逻辑的概念，而Level是资源场景表示。  
`AGameModeBase : public AInfo`  
`AGameMode : public AGameModeBase`                    Class登记、游戏内实体的Spawn、游戏的进度、Level的切换、多人游戏的步调同步  
`AGameStateBase : public AInfo`  
`AGameState : public AGameStateBase`                  保存当前游戏的状态数据  
`AGameSession : public AInfo`  

按照软件工程的理念，没有什么问题是不能通过加一个间接层解决的，不行就加两层！  
`UPlayer : public UObject`                            PlayerController  
`ULocalPlayer : public UPlayer`                       Viewport	LocalPlayer才是PlayerController产生的源头，也因此才有了Input  
`UNetConnection : public UPlayer`  
<img class="shadow" src="/img/in-post/ue4note/5.png" width="600">  
`UGameInstance : public UObject`  
UGameInstance里的接口大概有4类：   
1. 引擎的初始化加载，Init和ShutDown等（在引擎流程章节会详细叙述）   
2. Player的创建，如CreateLocalPlayer，GetLocalPlayers之类的。   
3. GameMode的重载修改，这是从4.14新增加进来改进，本来你只能为特定的某个Map配置好GameModeClass，但是现在GameInstance允许你重载它的PreloadContentForURL、CreateGameModeForURL和OverrideGameModeClass方法来hook改变这一流程。   
4. OnlineSession的管理，这部分逻辑跟网络的机制有关（到时候再详细介绍），目前可以简单理解为有一个网络会话的管理辅助控制类。  
`USaveGame : public UObject`  

MVC:  
<img class="shadow" src="/img/in-post/ue4note/6.png" width="1200">  

GamePlay框架:  
<img class="shadow" src="/img/in-post/ue4note/7.png" width="1000">  
<img class="shadow" src="/img/in-post/ue4note/ue4.png" width="1000">  

BP  
UHT（Unreal Header Tool，一个分析源码标记并生成代码的工具）  
UBT  

类型系统：                                          生成，收集，注册，链接  
`UMetaData : public UObject`  
`UInterface : public UObject`  
`UField : public UObject`                             UMetaData  
`UProperty : public UField`  
`UEnum : public UField`  
`UStruct : public UField`                             UProperty  
`UFunction : public UStruct`  
`UClass : public UStruct`                             UFunction  
`UScriptStruct : public UStruct`                      UFunction  



我们的类只是继承于IMyInterface，UMyInerface只是作为一个接口类型的载体，用以区分和查找不同的接口。  
观察UHT生成的代码可知，其实就分两部分，一是各种Z_辅助方法用来构造出各种UClass*等对象；另一部分是都包含着一两个static对象用来在程序启动的时候驱动登记，继而调用到前者的Z_方法，最终完成注册。   
在程序启动的时候，UE利用了Static自动注册模式把所有类的信息都一一登记一遍。而紧接着另一个就是顺序问题了，这么多类，谁先谁后，互相若是有依赖该怎么解决。众所周知，UE是以Module来组织引擎结构的（关于Module的细节会在以后章节叙述），一个个Module可以通过脚本配置来选择性的编译加载。在游戏引擎众多的模块中，玩家自己的Game模块是处于比较高级的层次的，都是依赖于引擎其他更基础底层的模块，而这些模块中，最最底层的就是Core模块（C++的基础库），接着就是CoreUObject，正是实现Object类型系统的模块  
UE4利用了C++的static对象初始化模式，在程序最初启动的时候，main之前，就收集到了所有的类型元数据、函数指针回调、名字、CRC等信息。  

<img class="shadow" src="/img/in-post/ue4note/8.png" width="600">  

* GENERATED_UCLASS_BODY()：属于之前版本的宏，自动生成带有指定参数的构造函数，不用用户再去生明构造函数，需要在CPP中实现，否则报错，之后成员是public。  
* GENERATED_BODY()：属于新版本的宏，不生成构造函数，如果需要自定义，需要自己声明并定义，之后成员是private。  
* 总结：使用后者，不要使用前者。


object运行时通过反射获得类型系统对象  

生成、收集、注册(第一个UCLASS: UObject::StaticClass())  

###### 生成：  
* Class:  
GENERATED_BODY |	Hello_Source_Hello_MyClass_h_11_GENERATED_BODY |    Hello_Source_Hello_MyClass_h_11_ENHANCED_CONSTRUCTORS |	static TClassCompiledInDefer<UMyClass> AutoInitializeUMyClass(TEXT("UMyClass"), sizeof(UMyClass), 899540749);  
					 |                                                 |    Hello_Source_Hello_MyClass_h_11_INCLASS	              |	static FCompiledInDefer Z_CompiledInDefer_UClass_UMyClass(Z_Construct_UClass_UMyClass, &UMyClass::StaticClass, TEXT("UMyClass"), false, nullptr, nullptr, nullptr);  

###### 收集：  
static时收集到各容器中  

* Class: TArray<FFieldCompiledInInfo*> GetDeferredClassRegistration()、TArray<class UClass *(*)()> GetDeferredCompiledInRegistration()  

* Enum: TArray<FPendingEnumRegistrant> GetDeferredCompiledInEnumRegistration()  

* Struct: TArray<FPendingStructRegistrant> GetDeferredCompiledInStructRegistration()、TMap<FName,UScriptStruct::ICppStructOps*> GetDeferredCppStructOps()  

* Function: void(UObject::*GCasts[255])(FFrame &Stack, RESULT_DECL)、UClass::AddNativeFunction、Native GNatives[256]  

* UObject: 提前注册：IMPLEMENT_VM_FUNCTION(EX_CallMath, execCallMathFunction) -> UObject::StaticClass()  

###### 注册：  
* static时生成第一个UCLASS: UObject::StaticClass()  

* Main函数中CoreUObject模块加载时UClassRegisterAllCompiledInClasses(消费GetDeferredClassRegistration): TClass::StaticClass(),把CoreUObject里面定义的类的UClass都给先构建出来。但是其实这些UClass对象内部的值还没有完成初始化设置  

* InitUObject(在UObjectBaseInit初始化结束后，就已经可以开始NewObject了，标志着整个UObject系统的成功创建)建立各UClass*对象之间互相的联系(OuterPrivate，ClassPrivate，SuperStruct，NamePrivate)  

* 多次调用ProcessNewlyLoadedUObjects  


## 后记
主要参考[InsideUE4](https://zhuanlan.zhihu.com/insideue4)，持续更新中...